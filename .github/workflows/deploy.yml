name: Deploy with Automatic Migrations

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  test-migrations:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v3
    
    - name: Use Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Set up test environment
      run: |
        cp .env.example .env
        echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/test_db" >> .env
        
    - name: Test Prisma migrations
      run: |
        echo "ðŸ”„ Testing migration workflow..."
        npm run prisma:deploy || echo "No migrations to apply"
        npm run prisma:generate
        npm run prisma:status
        
    - name: Run tests (if available)
      run: npm test || echo "No tests configured"

  deploy:
    needs: test-migrations
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Deploy to production
      run: |
        echo "ðŸš€ Deploying to production..."
        echo "The migration service will handle database migrations automatically on startup"
        echo "Set AUTO_MIGRATE=false in production if you want to disable auto-migration"
        
        # Example deployment commands:
        # docker build -f Dockerfile.production -t sitescope-backend:latest .
        # docker run -d --name sitescope-backend sitescope-backend:latest
        
        echo "âœ… Deployment process completed"