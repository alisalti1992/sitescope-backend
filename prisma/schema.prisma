generator client {
  provider      = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  createdAt DateTime @default(now())
}

model CrawlJob {
  id                    Int           @id @default(autoincrement())
  url                   String
  maxPages              Int
  ai                    Boolean
  email                 String
  takeScreenshots       Boolean       @default(true) // Whether to capture screenshots
  crawlSitemap          Boolean       @default(false) // Whether to automatically discover and crawl sitemap.xml
  sampledCrawl          Boolean       @default(false) // Whether to crawl only 3 pages of each post type
  ignoreUrlParameters   Boolean       @default(false) // Whether to ignore URL parameters when crawling and storing links
  status                String        @default("pending") // pending, running, completed, failed, paused
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt
  completedAt           DateTime?
  errorMessage          String?
  startedAt             DateTime?
  totalUniquePagesFound Int           @default(0) // Total unique pages discovered
  pagesCrawled          Int           @default(0) // Pages actually crawled and saved
  pagesRemaining        Int           @default(0) // maxPages - pagesCrawled
  canContinue           Boolean       @default(true) // Whether crawl can be resumed
  lastCrawledUrl        String?       // Last successfully crawled URL
  aiReportStatus        String?       // pending, completed, failed, not_requested
  aiReportData          Json?         // JSON report from AI webhook
  aiReportGeneratedAt   DateTime?     // When AI report was generated
  aiReportError         String?       // Error message if AI report generation failed
  internalLinks         InternalLink[]
  externalLinks         ExternalLink[]
  inlinks               Inlink[]
}

model InternalLink {
  id                       Int      @id @default(autoincrement())
  jobId                    Int
  job                      CrawlJob @relation(fields: [jobId], references: [id], onDelete: Cascade)
  
  // Basic Info
  address                  String
  contentType              String?
  statusCode               Int?
  status                   String?
  indexability             String?
  indexabilityStatus       String?
  
  // Content Data
  title                    String?
  metaDescription          String?
  metaKeywords             String?
  h1                       String?
  metaRobots               String?
  canonicalLinkElement     String?
  relNext                  String?
  relPrev                  String?
  httpRelNext              String?
  httpRelPrev              String?
  amphtmlLinkElement       String?
  
  // Size & Performance
  sizeBytes                Int?
  transferredBytes         Int?
  totalTransferredBytes    Int?
  co2Mg                    Float?
  carbonRating             String?
  responseTime             Int?
  
  // Content Analysis
  wordCount                Int?
  sentenceCount            Int?
  avgWordsPerSentence      Float?
  fleschReadingEaseScore   Float?
  readability              String?
  textRatio                Float?
  
  // Structure
  crawlDepth               Int?
  folderDepth              Int?
  linkScore                Float?
  
  // Links
  inlinks                  Int?
  uniqueInlinks            Int?
  uniqueJsInlinks          Int?
  percentOfTotal           Float?
  outlinks                 Int?
  uniqueOutlinks           Int?
  uniqueJsOutlinks         Int?
  externalOutlinks         Int?
  uniqueExternalOutlinks   Int?
  uniqueExternalJsOutlinks Int?
  
  // Duplicates & Similarity
  closestNearDuplicateMatch String?
  numberOfNearDuplicates    Int?
  spellingErrors            Int?
  grammarErrors             Int?
  
  // Technical
  lastModified             DateTime?
  redirectUrl              String?
  redirectType             String?
  cookies                  String?
  language                 String?
  httpVersion              String?
  mobileAlternateLink      String?
  
  // Semantic Analysis
  closestSemanticallySimAddress String?
  semanticSimilarityScore       Float?
  numberOfSemanticallySimilar   Int?
  semanticRelevanceScore        Float?
  urlEncodedAddress            String?
  
  // Raw Data
  htmlContent              String? @db.Text
  screenshotUrl            String?
  
  // Timestamps
  crawlTimestamp           DateTime @default(now())
  createdAt                DateTime @default(now())
  updatedAt                DateTime @updatedAt
  
  // Relations
  incomingLinks            Inlink[] @relation("InternalLinkInlinks")
  outgoingLinks            Inlink[] @relation("InternalLinkOutlinks")

  @@index([jobId])
  @@index([address])
  @@index([statusCode])
  @@unique([jobId, address]) // Prevent duplicate URLs per job
}

model ExternalLink {
  id          Int      @id @default(autoincrement())
  jobId       Int
  job         CrawlJob @relation(fields: [jobId], references: [id], onDelete: Cascade)
  address     String
  contentType String?
  status      String?
  inlinks     Int?
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  incomingLinks Inlink[] @relation("ExternalLinkInlinks")

  @@index([jobId])
  @@index([address])
  @@unique([jobId, address]) // Prevent duplicate external URLs per job
}

model Inlink {
  id           Int      @id @default(autoincrement())
  jobId        Int
  job          CrawlJob @relation(fields: [jobId], references: [id], onDelete: Cascade)
  
  // Link Info
  type         String   // "internal" or "external"
  fromAddress  String
  toAddress    String
  anchorText   String?
  altText      String?
  follow       Boolean  @default(true)
  target       String?
  rel          String?
  statusCode   Int?
  status       String?
  pathType     String?
  linkPath     String?
  linkPosition Int?
  linkOrigin   String?
  size         Int?
  transferred  Int?
  
  // Relations
  fromInternalLink InternalLink? @relation("InternalLinkOutlinks", fields: [fromInternalLinkId], references: [id])
  fromInternalLinkId Int?
  
  toInternalLink   InternalLink? @relation("InternalLinkInlinks", fields: [toInternalLinkId], references: [id])
  toInternalLinkId Int?
  
  toExternalLink   ExternalLink? @relation("ExternalLinkInlinks", fields: [toExternalLinkId], references: [id])
  toExternalLinkId Int?
  
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@index([jobId])
  @@index([fromAddress])
  @@index([toAddress])
  @@index([type])
}
